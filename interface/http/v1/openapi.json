{
  "openapi": "3.0.3",
  "info": {
    "title": "Shimmering Bee: Controller",
    "description": "Interactive specification for the Shimmering Bee controller, v1 API. Allowing interactive access to all devices, gateways and zones on the controller.",
    "version": "1.0.0",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "externalDocs": {
    "description": "Shimmering Bee Controller on GitHub",
    "url": "http://github.com/shimmeringbee/controller"
  },
  "servers": [
    {
      "url": "/api/v1"
    }
  ],
  "tags": [
    {
      "name": "auth",
      "description": "Access to interface authentication control"
    },
    {
      "name": "devices",
      "description": "Access to individual devices connected to the controller"
    },
    {
      "name": "gateways",
      "description": "Access to gateways that provide connectivity to devices"
    },
    {
      "name": "zones",
      "description": "Access to zone hierarchy, used to fetch data about zones and devices"
    },
    {
      "name": "websocket",
      "description": "Websocket for asynchronous notifications."
    }
  ],
  "paths": {
    "/auth/type": {
      "get": {
        "tags": [
          "auth"
        ],
        "summary": "Return type of authentication",
        "description": "Provides details of the type of authentication used by the API, as well as any hypermedia links to proceed with a login process.",
        "responses": {
          "200": {
            "description": "successfully returned authentication type",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/auth/check": {
      "get": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "auth"
        ],
        "summary": "Return currently authenticated identity",
        "description": "Retrieve the authentication state, and if successfully authenticated the current identity.",
        "responses": {
          "200": {
            "description": "successfully returned authenticated state",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      }
    },
    "/devices": {
      "get": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "devices"
        ],
        "summary": "Return all devices",
        "description": "List all devices present on the controller, including the state of any capabilities.",
        "responses": {
          "200": {
            "description": "successfully queried all devices",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      }
    },
    "/devices/{deviceId}": {
      "get": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "devices"
        ],
        "summary": "Get individual device",
        "description": "Get single specified device, including the state of any capabilities",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of device to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully queried the device",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "device not found"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      },
      "patch": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "devices"
        ],
        "summary": "Update device metadata",
        "description": "Update a devices metadata, allowing fields such as a custom name be set",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of device to update",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Metadata update request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successfully updated the device",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "device not found"
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      }
    },
    "/devices/{deviceId}/capabilities/{capabilityName}/{capabilityAction}": {
      "post": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "devices"
        ],
        "summary": "Invoke capability action",
        "description": "Update a devices metadata, allowing fields such as a custom name be set",
        "parameters": [
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of device to invoke action on",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "capabilityName",
            "in": "path",
            "description": "Name of capability to invoke action upon",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "capabilityAction",
            "in": "path",
            "description": "Name of action to invoke",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "layer",
            "in": "query",
            "description": "Output layer to apply capability action to, defaults to http",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "retention",
            "in": "query",
            "description": "Level of retention of requested capability action, defaults to oneshot",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "oneshot",
                "maintain"
              ]
            }
          }
        ],
        "requestBody": {
          "description": "Data for capability action to process",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successfully invoked action on the device",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "device not found"
          },
          "400": {
            "description": "bad request"
          },
          "500": {
            "description": "internal error"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      }
    },
    "/gateways": {
      "get": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "gateways"
        ],
        "summary": "Return all gateways",
        "description": "List all gateways present on the controller, including a list of all capabilities they support",
        "responses": {
          "200": {
            "description": "successfully queried all gateways",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/gateways/{gatewayId}": {
      "get": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "gateways"
        ],
        "summary": "Get individual gateway",
        "description": "Get single specified gateway, including the a list of supported capabilities",
        "parameters": [
          {
            "name": "gatewayId",
            "in": "path",
            "description": "ID of gateway to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully queried the gateway",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "gateway not found"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      }
    },
    "/gateways/{gatewayId}/devices": {
      "get": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "gateways"
        ],
        "summary": "Get an individual gateways devices",
        "description": "Get list of all devices that are present on the specified gateway",
        "parameters": [
          {
            "name": "gatewayId",
            "in": "path",
            "description": "ID of gateway to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully queried the gateways devices",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "gateway not found"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      }
    },
    "/zones": {
      "get": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "zones"
        ],
        "summary": "Return all root level zones",
        "description": "List all zones that are at the root level of the controller",
        "parameters": [
          {
            "name": "include",
            "in": "query",
            "description": "Optional data to be included in the response",
            "explode": true,
            "style": "matrix",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "devices",
                  "subzones"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully queried root zones",
            "content": {
              "application/json": {}
            }
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      },
      "post": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "zones"
        ],
        "summary": "Create new zone",
        "description": "Creates a new zone at the root level",
        "requestBody": {
          "description": "Zone creation request object",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZoneCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successfully created the zone",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "bad request"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      }
    },
    "/zones/{zoneId}": {
      "get": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "zones"
        ],
        "summary": "Return a specified zone",
        "description": "Fetch the specified zone",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "ID of zone to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "include",
            "in": "query",
            "description": "Optional data to be included in the response",
            "explode": true,
            "style": "matrix",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "devices",
                  "subzones"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successfully queried zone",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "zone not found"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      },
      "delete": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "zones"
        ],
        "summary": "Delete a specified zone",
        "description": "Delete the specified zone, must have no sub zones or member devices",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "ID of zone to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successfully deleted zone",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "zone not found"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      },
      "patch": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "zones"
        ],
        "summary": "Update a specified zone",
        "description": "Update the specified zone, changing its name or order with sibling zones",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "ID of zone to get",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Zone update request object, all fields options, use either reorderBefore or reorderAfter, not both. If both are specified reorderAfter will take priority.",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZoneUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successfully deleted zone",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "zone not found"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      }
    },
    "/zones/{zoneId}/devices/{deviceId}": {
      "put": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "zones"
        ],
        "summary": "Add a device to a specified zone",
        "description": "Adds the device to the specified zone, devices may belong to multiple zones",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "ID of zone",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successfully added device to zone",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "zone/device not found"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      },
      "delete": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "zones"
        ],
        "summary": "Delete a device from a specified zone",
        "description": "Removes the device from the specified zone",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "ID of zone",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "deviceId",
            "in": "path",
            "description": "ID of device",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successfully removed device from zone",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "zone/device not found"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      }
    },
    "/zones/{zoneId}/subzones/{subZoneId}": {
      "put": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "zones"
        ],
        "summary": "Move a zone to be a subzone of another",
        "description": "Adds the subzone as a child of the zone provided",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "ID of zone",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subZoneId",
            "in": "path",
            "description": "ID of subzone",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successfully made subzone child of zone",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "zone not found"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      },
      "delete": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "zones"
        ],
        "summary": "Orphan a subzone from a zone",
        "description": "Remove the subzone from the zone provided, move it back to the root",
        "parameters": [
          {
            "name": "zoneId",
            "in": "path",
            "description": "ID of zone",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "subZoneId",
            "in": "path",
            "description": "ID of subzone",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "successfully moved subzone back to root",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "bad request"
          },
          "404": {
            "description": "zone not found"
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      }
    },
    "/websocket": {
      "get": {
        "security": [
          {
            "basicAuth": []
          },
          {
            "bearerAuth": []
          }
        ],
        "tags": [
          "websocket"
        ],
        "summary": "Receive asynchronous events",
        "description": "Provides an asynchronous stream device and zone events, targeted for maintaining state in an application. A WebSocket client must be used, this is included here for informational purposes and will not function. Please note an appropriate form of HTTP authentication must be used before the connection upgrade.",
        "parameters": [
          {
            "name": "Connection",
            "in": "header",
            "required": true
          },
          {
            "name": "Upgrade",
            "in": "header",
            "required": true
          },
          {
            "name": "Sec-WebSocket-Key",
            "in": "header",
            "required": true
          },
          {
            "name": "Sec-WebSocket-Version",
            "in": "header",
            "required": true
          }
        ],
        "responses": {
          "101": {
            "description": "switching protocols",
            "headers": {
              "Connection": {
                "required": true
              },
              "Upgrade": {
                "required": true
              },
              "Sec-WebSocket-Accept": {
                "required": true
              }
            }
          },
          "401": {
            "description": "unauthorised, provide suitable authentication credentials"
          },
          "403": {
            "description": "forbidden, credentials provided are valid but do not permit action requested"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DeviceUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Blue light on top of phone box"
          }
        }
      },
      "ZoneCreate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Police Box"
          }
        }
      },
      "ZoneUpdate": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Police Box"
          },
          "reorderBefore": {
            "type": "integer",
            "example": 1
          },
          "reorderAfter": {
            "type": "integer",
            "example": 2
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Required if JWT authentication type is enabled in interface configuration."
      },
      "basicAuth": {
        "type": "http",
        "scheme": "basic",
        "description": "Required if basic authentication type is enabled in interface configuration."
      }
    }
  }
}

